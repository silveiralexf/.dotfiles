#!/bin/zsh
# -----------------------------------------------------------------------------
# Handlers and core OS stuff
# -----------------------------------------------------------------------------
# GpG settings
export GPG_TTY="$(tty)"

# SOPS GpG fingerprint
export SOPS_PGP_FP="477FF01AA99B50C66423ED037540CEF42CB05DAF"

# Lang & Locale settings
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Format time output just like bash would
export TIMEFMT=$'real\t%E\nuser\t%U\nsys\t%S'

# don't put duplicate lines or lines starting with space in bash history
export HISTCONTROL="ignoredups:erasedups"

# Make some commands not show up in history
export HISTIGNORE="&:ls:cd -:cd:date:* --help:exit:pwd:history:clear:mount:umount:[ \t]*"

# Display settings for KeePassXC (running with AppImage)
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_SCREEN_SCALE_FACTORS=DP1=1.5 #;DP1=1.5;DP2=1.5;HDMI1=1.5;HDMI2=1.5;VIRTUAL1=1.5;

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=50000000
export HISTFILESIZE="$HISTSIZE"
export SAVEHIST=$HISTSIZE

# Path for tools and utils
export PATH="${PATH}:${HOME}"
export PATH="${PATH}:${HOME}/.local/share/nvim/mason/bin"
export PATH="${PATH}:${HOME}/AppImage"
export PATH="${PATH}:${HOME}/bin"
export PATH="${PATH}:/Applications/WezTerm.app/Contents/MacOS"
export PATH="${PATH}:/Applications/kitty.app/Contents/MacOS/"
export PATH="${PATH}:/opt/bin"
export PATH="${PATH}:/opt/homebrew/bin"
export PATH="${PATH}:/opt/homebrew/opt/socket_vmnet/bin"
export PATH="${PATH}:/opt/homebrew/sbin"
export PATH="${PATH}:/opt/local/bin"
export PATH="${PATH}:/opt/nvim/bin"
[ -d "$HOME/.dotfiles/utils" ] && export PATH="$PATH:$HOME/.dotfiles/utils::"
[ -d "$HOME/.dotfiles/scripts" ] && export PATH="$PATH:$HOME/.dotfiles/utils::"

# -----------------------------------------------------------------------------
# Terminal colors & display
# -----------------------------------------------------------------------------
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

# get some colors on commands with grc
[[ -s "/etc/grc.zsh" ]] && source "/etc/grc.zsh"

# Syntax highlight for LESS command
if command -v source-highlight &>/dev/null 2>&0; then
  export PAGER="less"
  export LESS="-R"
  [ -f "$HOME/.dotfiles/utils/src-hilite-lesspipe.sh" ] &&
    export LESSOPEN="| $HOME/.dotfiles/utils/src-hilite-lesspipe.sh %s"
fi

# make less more friendly for non-text input files, see lesspipe(1)
[ -f /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

export FONTCONFIG_PATH=/etc/fonts

# Tmux Profile display
export DISABLE_AUTO_TITLE='true'

# -----------------------------------------------------------------------------
# Tools & Utils
# -----------------------------------------------------------------------------

# Enable Docker build kit by default
export DOCKER_BUILDKIT=1
export BUILDKIT_COLORS=run=green:warning=yellow:error=red:cancel=255,165,0
export BUILDKIT_PROGRESS=plain

# -----------------------------------------------------------------------------
# Git
# -----------------------------------------------------------------------------
export DISABLE_UNTRACKED_FILES_DIRTY="true"
export PATH="${PATH}:/usr/local/git/bin"

# -----------------------------------------------------------------------------
# Coding stuff
# -----------------------------------------------------------------------------

# For compilers to find zlib you may need to set:
export LDFLAGS="-L/opt/homebrew/opt/zlib/lib"
export CPPFLAGS="-I/opt/homebrew/opt/zlib/include"

# For pkg-config to find zlib you may need to set:
export PKG_CONFIG_PATH="/opt/homebrew/opt/zlib/lib/pkgconfig"

export PATH="${PATH}:${HOME}"

# Golang
export GO111MODULE="on"
export GOPATH="${HOME}/go"
export GOBIN="${GOPATH}/bin"
export PATH="$PATH:$GOBIN:$GOROOT/bin"
export PATH="${PATH}:/usr/local/go/bin"

# Rust
source "${HOME}/.cargo/env"

# Java
#export JAVA_HOME="${HOME}/Library/Java/JavaVirtualMachines/temurin-11.0.18/Contents/Home"
#export JDK_HOME=/usr/local/lib/jvm/zulu-8/
#export JAVA_HOME=/usr/local/lib/jvm/zulu-8/
#export JRE_HOME="${JAVA_HOME}/jre"
export PATH="${PATH}:${JAVA_HOME}/bin:$JRE_HOME/bin"
export PATH="${PATH}:/opt/apache-maven-3.6.3/bin"
[ -f /etc/bash_completion.d/mvn ] && source /etc/bash_completion.d/mvn

export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# Python
export PATH="${PATH}:${HOME}/miniconda3/bin"
export PATH="${PATH}:${HOME}/anaconda3/bin"
export PATH="${PATH}:/opt/pycharm-community-2021.3.1"

# PyEnv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

# PipX
export PATH="${PATH}:${HOME}/.local/bin"

# Ruby
PATH="${PATH}:${HOME}/.gem/ruby/2.7.0/bin"

# NodeJS
export PATH="${PATH}:$HOME/.node_modules_global/bin"
export PATH="${PATH}:${HOME}/.npm/bin"
export PATH="${PATH}:${HOME}/.npm/bin/bin"
export NVM_DIR="$HOME/.nvm"

# This loads nvm
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
# This loads nvm bash_completion
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] &&
  \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"

# Dotnet
export DOTNET_CLI_TELEMETRY_OPTOUT=1

# HomeBrew
export PATH="/opt/homebrew/opt/openssl@3.0/bin:$PATH"
export DYLD_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_LIBRARY_PATH"
#export PATH="${HOMEBREW_PREFIX}/opt/gnu-sed/libexec/gnubin:${PATH}"

# Terraform Env
export PATH="${PATH}:${HOME}/.tfenv/bin"

# Rancher
export DOCKER_DEFAULT_PLATFORM=linux/amd64
export PATH="${PATH}:/Applications/Rancher Desktop.app/Contents/Resources/resources/darwin/lima/bin"
export LIMA_HOME="${HOME}/Library/Application Support/rancher-desktop/lima"
#export COLIMA_VM="default"
#export COLIMA_VM_SOCKET="${HOME}/.colima/${COLIMA_VM}/docker.sock"
#export DOCKER_HOST="unix://${COLIMA_VM_SOCKET}"

# -----------------------------------------------------------------------------
# EOF
# -----------------------------------------------------------------------------
