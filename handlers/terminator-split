#!/usr/bin/python

"""terminator-split

Wrapper script for splitting Terminator terminal emulator
https://github.com/AlekseyChudov/terminator-split
"""

import argparse
import logging
import os
import resource
import tempfile

import configobj

__author__ = 'Aleksey Chudov <aleksey.chudov@gmail.com>'
__date__ = '23 Nov 2018'
__version__ = '1.0.4'


class TerminatorSplit(object):

    DEFAULT = {
        'config': os.path.expanduser('~/.config/terminator/config'),
        'command': "ssh '{}'",
        'shell': 'bash -l',
        'terminator': '/usr/bin/terminator'
    }

    def __init__(self):
        self._args, self._unknown_args = self._parse_args()
        self._logging()
        self._child = 0
        self._layout = None
        self._config = self._write_config()
        self._launch_terminator()

    def _parse_args(self):
        usage = """
        terminator-split [-h] [-d]
                        [-e COMMAND] [-g CONFIG] [-t TERMINATOR]
                        [TERMINATOR_OPTIONS]
                        hostname [hostname ...]

        terminator-split [-h] [-d]
                        [-g CONFIG] [-t TERMINATOR] [-s SHELL]
                        [TERMINATOR_OPTIONS]
                        number
        """
        parser = argparse.ArgumentParser(usage=usage)
        parser.add_argument('-d', '--debug', action='store_const', dest='level',
                            const='DEBUG', default='INFO', help='show debug messages at execution time')
        parser.add_argument('-e', '--command')
        parser.add_argument('-g', '--config', help='Use this terminator config file')
        parser.add_argument('-s', '--shell', help='Specify the shell to be loaded')
        parser.add_argument('-t', '--terminator')
        parser.add_argument('hostname', nargs='+')
        namespace = argparse.Namespace(**self.DEFAULT)
        args, unknown_args = parser.parse_known_args(namespace=namespace)
        self._layout[child] = {
            'parent': parent,
            'type': 'HPaned'
        }
        return child

    def _split_vertical(self, parent):
        child = self._next_child()
        self._layout[child] = {
            'parent': parent,
            'type': 'VPaned'
        }
        return child

    def _launch_terminator(self):
        self._demonize()
        os.execl(self._args.terminator, self._args.terminator,
                 '-g', self._config, '-u', *self._unknown_args)

    def _demonize(self, chdir='/', max_fd=1024, umask=0):
        """
        http://code.activestate.com/recipes/278731-creating-a-daemon-the-python-way/
        """
        if os.fork():
            os._exit(0)

        os.setsid()
        os.chdir(chdir)
        os.umask(umask)

        if os.fork():
            os._exit(0)

        start_fd = 0
        stop_fd = max(max_fd, resource.getrlimit(resource.RLIMIT_NOFILE)[1])

        if self._is_debug():
            start_fd = 4

        for fd in range(start_fd, stop_fd):
            try:
                os.close(fd)
            except OSError:
                pass

        if not self._is_debug():
            os.open(os.devnull, os.O_RDWR)
            os.dup2(0, 1)
            os.dup2(0, 2)


if __name__ == '__main__':
    TerminatorSplit()
